module.exports = "precision highp float;\nvarying vec2 vUv;\nvarying vec3 vColor;\nvarying float vAlpha;\nattribute float data;\nattribute vec3 color;\nattribute vec3 cPos;\nattribute vec3 position2;\nattribute vec2 speed;\nuniform float time;\nuniform float dark;\nuniform float scale;\nfloat random( vec2 seed ) {\n\treturn fract(sin(seed.x+seed.y*1e3)*1e5);\n}\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n     /* 1. find current tetrahedron T and it's four vertices */\n     /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n     /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\n     /* calculate s and x */\n     vec3 s = floor(p + dot(p, vec3(F3)));\n     vec3 x = p - s + dot(s, vec3(G3));\n\n     /* calculate i1 and i2 */\n     vec3 e = step(vec3(0.0), x - x.yzx);\n     vec3 i1 = e*(1.0 - e.zxy);\n     vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n     /* x1, x2, x3 */\n     vec3 x1 = x - i1 + G3;\n     vec3 x2 = x - i2 + 2.0*G3;\n     vec3 x3 = x - 1.0 + 3.0*G3;\n\n     /* 2. find four surflets and store them in d */\n     vec4 w, d;\n\n     /* calculate surflet weights */\n     w.x = dot(x, x);\n     w.y = dot(x1, x1);\n     w.z = dot(x2, x2);\n     w.w = dot(x3, x3);\n\n     /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n     w = max(0.6 - w, 0.0);\n\n     /* calculate surflet components */\n     d.x = dot(random3(s), x);\n     d.y = dot(random3(s + i1), x1);\n     d.z = dot(random3(s + i2), x2);\n     d.w = dot(random3(s + 1.0), x3);\n\n     /* multiply d by w^4 */\n     w *= w;\n     w *= w;\n     d *= w;\n\n     /* 3. return the sum of the four surflets */\n     return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n            +0.2666667*simplex3d(2.0*m*rot2)\n            +0.1333333*simplex3d(4.0*m*rot3)\n            +0.0666667*simplex3d(8.0*m);\n}\n\n\n\n// USE:\n\n// use with simplex\n// vec3 p3 = vec3(time*0.0001,  vUv.x, vUv.y);\n// float shade = simplex3d_fractal(p3*6.0+7.0);\n\n\n\nvoid main() {\n    vUv = uv;\n    vColor = color * dark;\n    float prog = abs(mod(time + data*2.  ,2.)-1.);\n    vec3 cPath = cPos * prog;\n    vec3 path = position2 * prog+ sin(time + data * 6.28);\n    path = mix(cPath, path , prog);\n    vAlpha = 1.- prog;\n    vec4 pos = projectionMatrix * modelViewMatrix * vec4( path , 1.0 );\n     gl_PointSize =  max(2. * (1. -  pos.z/200. ), .2) * scale;\n    gl_Position = pos;\n}"